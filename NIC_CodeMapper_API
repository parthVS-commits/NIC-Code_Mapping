import openai
import pinecone
import os
from dotenv import load_dotenv
from pinecone import Pinecone
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

# Load environment variables
load_dotenv()

# Retrieve API keys safely
openai_api_key = os.getenv("OPENAI_API_KEY")
pinecone_api_key = os.getenv("PINECONE_API_KEY")

# Validate API keys
if not openai_api_key:
    raise ValueError("ðŸš¨ Missing OPENAI_API_KEY! Check your .env file or environment variables.")

if not pinecone_api_key:
    raise ValueError("ðŸš¨ Missing PINECONE_API_KEY! Check your .env file or environment variables.")

# Initialize OpenAI client (New API format)
client = openai.OpenAI(api_key=openai_api_key)

# Initialize Pinecone
pc = Pinecone(api_key=pinecone_api_key)

# Define index name
index_name = "nic-classification"

# Check if the index exists before using it
if index_name not in pc.list_indexes().names():
    raise ValueError(f"ðŸš¨ Pinecone index '{index_name}' not found. Please create it first in the Pinecone dashboard.")

# Connect to the Pinecone index
index = pc.Index(index_name)

# Initialize FastAPI
app = FastAPI(title="NIC Code Finder API", version="1.0", description="Find NIC codes based on business objectives.")

class ObjectiveInput(BaseModel):
    objective: str

@app.get("/")
def home():
    return {"message": "Welcome to NIC Code Finder API! Use /search_nic_code to get results."}

@app.post("/search_nic_code")
def search_nic_code(data: ObjectiveInput):
    """API to search for the most relevant NIC Code based on the business objective."""
    objective = data.objective

    if not objective:
        raise HTTPException(status_code=400, detail="Objective cannot be empty!")

    # Step 1: Use GPT-4 to refine the user input
    prompt = f"Refine the following business objective for better classification:\n\n{objective}"

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an expert in business classification. "
                "Post understanding the industry, try to give options which are firstly related to that industry only "
                "and then move towards giving generalised answers. Your focus should be to understand the industry "
                "while giving out the code and description. It must align."
            },
            {"role": "user", "content": prompt}
        ]
    )

    refined_objective = response.choices[0].message.content

    # Step 2: Generate embedding from the refined objective
    embedding_response = client.embeddings.create(input=refined_objective, model="text-embedding-ada-002")
    query_embedding = embedding_response.data[0].embedding

    # Step 3: Search in Pinecone
    results = index.query(vector=query_embedding, top_k=10, include_metadata=True)

    if not results["matches"]:
        return {"message": "No NIC codes found for the given objective. Please try again with a different description."}

    nic_codes = [{"NIC Code": match["id"], "Description": match["metadata"]["description"]} for match in results["matches"]]

    return {"message": "Success", "refined_objective": refined_objective, "NIC Codes": nic_codes}
